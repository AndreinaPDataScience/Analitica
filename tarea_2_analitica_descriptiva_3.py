# -*- coding: utf-8 -*-
"""Tarea 2-analitica descriptiva 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1csQJDlcrpC9YA2XxSfmFmCyFK9gkC5Ei
"""

#importar librerias
import pandas as pd
import numpy as np
import bokeh as bk
import matplotlib.pyplot as plt
import seaborn as sns
import plotnine as pn
import plotly as pl

from google.colab import drive
drive.mount('/content/drive')
#Carga del dataset
data = pd.read_csv("/content/drive/MyDrive/Student_Behaviour.csv")

data.head()

#Descripción de las variables del dataset
data.info()

data.info

#Estadisticas descriptivas:
data.describe()

data.head(10)
#Gráficos

! pip install pandas_profiling
from pandas_profiling import ProfileReport

from pandas_profiling import ProfileReport
ProfileReport(data, title= 'Reporte ')

#Graficos con Bokeh
import bokeh.plotting 
Height= data['Height(CM)']
Weight= data['Weight(KG)']
p = bokeh.plotting.figure(width=300, height=300, tools="pan,reset,save")
p.circle(Height,Weight,radius= 0.3, alpha=0.5)
bokeh.plotting.output_file("Grap.html")

bokeh.plotting.show(p)



data.head(12)

bokeh.plotting.show(p)

import plotly.express as px

fig= px.scatter(data,x='college_mark', y='12th_mark', size='10th_mark',color='hobbies',title='Calificacion 12mo periodo por hobbies')
fig.show()

fig1=px.pie(data,values='salary_expectation',names='Financial Status', title='Salario esperado segun estatus monetario')

fig1.show()

dat1= data.query('hobbies == "Reading books"')

fig2=px.bar(dat1,x='prefer to study in', color='Gender')
fig2.update_layout(title="Preferencia de tiempo de estudio según género y notas", xaxis_title=" Horario de preferencia",
    font_family="Courier New",
    font_color="black",
    title_font_family="Times New Roman",
    title_font_color="black",
    legend_title_font_color="grey")
fig2.show()

dat1

fig3= px.line(dat1,x= "daily studing time", y="salary expectation", color='Stress Level ')
fig3.update_layout(title="Salario esperado, segun tiempo de estudio empleado", xaxis_title="Horas de estudio diario",
    font_family="Courier New",
    font_color="black",
    title_font_family="Times New Roman",
    title_font_color="black",
    legend_title_font_color="grey")
fig3.show()

data=data.rename({'college mark':'Calificaciones', '10th Mark': '10th_Mark','12th Mark': '12th_Mark'})

data.columns

dat1.head(10)

from bokeh.plotting import figure, output_file, show
graph = figure(title = "Bokeh Bar Graph")
graph.vbar(x=dat1['Gender'], top = dat1['salary expectation'], width = 0.5)
show(graph)

sns.histplot(data,x='salary expectation', hue='Stress Level ',
    palette="light:m_r",
    edgecolor=".3",
    linewidth=.5)

sns.displot(
    data, x="college mark", col="Financial Status", row="Gender",
    binwidth=3, height=3, facet_kws=dict(margin_titles=True),
)

sns.boxplot( x="college_mark", data=data,
            whis=[0, 100], width=.6, palette="vlag")

#Media y desviacion estandar
print("El promedio del salario esperado es:")
print(np.average(data["salary expectation"]))
print("Respecto a la media, este varia:")
print(np.std(data['salary expectation']))

print("El promedio de las calificaciones es:")
print(np.average(data["college mark"]))
print("Respecto a la media, este varia:")
print(np.std(data['college mark']))

#Muestreo de los datos
muestra= data.sample(200)

muestra.head()

!pip install pingouin

#Librerias para estadisticos
from scipy import stats
#import pingouin as pg

"""# HIPOTESIS
Hipotesis nula: Que la media de los estudiantes que dedican más de 3 horas de estudio es mayor a los que dedican menos de 1 hora. 


Hipotesis alternativa: Los estudiantes que dedican menos de una hora son mas habituales que los que no. 
"""

#Agrupamiento de los datos
muestra.groupby('daily studing time').size()

var_sal= muestra['salary expectation'].var(ddof=1)
print(var_sal)
var_college= muestra['college mark'].var(ddof=1)
print(var_college)

#Desviacion estandar
s=np.sqrt((var_sal+var_college)/2)
s

#Estadisticos_t

print("El estadistico T de estas dos variables es: ")
t_stats= (var_college.mean()-var_sal.mean())/(s*np.sqrt(200/2))
t_stats

#Comparacion:
d=2*200/2
d

#P-value
p = 1 - stats.t.cdf(t_stats,df=d)
p

muestra.head()

data2=data.rename(columns={'college mark':'college_mark',
                        '12th Mark':'12th_mark',
                        '10th Mark':'10th_mark',
                        'salary expectation': 'salary_expectation'},
               inplace=True)
data3=pd.DataFrame(data2)

data.head()

import statsmodels.formula.api as smf
import statsmodels.api as sm
est = smf.ols(formula='salary_expectation ~ college_mark', data=data).fit()
est.summary() # Employed se estima en base a GNP.

"""# Segundo ejercio práctico, con otras hipótesis:
**Hipotesis nula**: Que el sueldo esperado de los empleados suele ser mayor a 500 dólares
"""

#Data
data.head()
#media poblacional de salarios
mu_p= data['salary_expectation'].mean()
print(" Promedio del salario esperado poblacional: ", mu_p)
#Extraccion de muestra de tamaño 100
muestra1= data.sample(100)
#Promedio del salario muestral
mu_m=muestra1['salary_expectation'].mean()
print(" Promedio del salario esperado muestral: ", mu_m)

var_a = data['salary_expectation'].var(ddof=1)
var_b = muestra1['salary_expectation'].var(ddof=1)

from scipy import stats
t_p=stats.ttest_ind(data['salary_expectation'], muestra1['salary_expectation'], equal_var= True)
t_p



"""# Hipotesis para el ejercicio a presentar

Hipotesis nula: Todos los estudiantes tienen un promedio relativamente superior al 80

Hipotesis alternativa: su promedio es mucho menor
"""

#Como es de dos colas, se definen las dos muestras:
m_1= data.sample(100)
m_2=data.sample(100)
mu_m1=m_1['college_mark'].mean()
print('La media de la muestra 1 es:', mu_m1)
mu_m2=m_2['college_mark'].mean()
print('La media de la muestra 2 es:', mu_m2)
#Varianzas de las muestras
var_m1 = m_1['college_mark'].var(ddof=1)
var_m2 = m_2['college_mark'].var(ddof=1)

print('La varianza de la muestra 1 es:', var_m1)
print('La varianza de la muestra 2 es:', var_m2)

#Desviacion estandar
es_dv= np.sqrt((var_m1 + var_m2)/2)
print('La desviacion estandar es:', es_dv)
#Estadistico t
t_stats = ( mu_m1- mu_m2)/(es_dv*np.sqrt(2/100))
print('El estadistico t, es: ', t_stats)
#Grados de libertad
grados = (2*100) - 2

#P-value:
p = 1 - stats.t.cdf(t_stats,df=grados)
print('El estadistico t: ', t_stats)
print('Los grados de libertad son: ', grados)
print('El valor p, es igual a:', p)
#con la funcion de scipy se puede hacer de la siguiente manera:
resultado= stats.ttest_ind(m_1['college_mark'],m_2['college_mark'])
print('Con la funcion de scipy esto seria:', resultado)